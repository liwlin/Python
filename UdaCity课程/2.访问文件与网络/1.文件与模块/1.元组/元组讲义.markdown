# 元组简介
Python 提供了另一个有用的内置类型：元组。元组用于存储相关信息。我们来看一下有关纬度和经度的示例：

>\>>> AngkorWat = (13.4125, 103.866667) \
>\>>> print(type(AngkorWat))  \
<class 'tuple'>
>\>>> print("Angkor Wat is at latitude: {}".format(AngkorWat[0])) \
Angkor Wat is at latitude: 13.4125
>\>>> print("Angkor Wat is at longitude: {}".format(AngkorWat[1])) \
Angkor Wat is at longitude: 103.866667
元组与列表相似，用于存储有序对象的集合，可以通过其索引进行访问（例如 AngkorWat[0] 和 AngkorWat[1]）。不同于列表，元组具有不可变性。所以不能添加和删除元组中的项，或对其进行排序。

# 为什么需要元组?
如果元组与列表类似，但功能又少，为什么我们还需要元组？当有两个或更多密切相关的值，而且通常一起使用时，如纬度和经度坐标，元组就会派上用场。

元组可用于适当为多个变量赋值

>\>>> dimensions = 52, 40, 100 \
>\>>> length, width, height = dimensions \
>\>>> print("The dimensions are {}x{}x{}".format(length, width, height)) \
The dimensions are 52x40x100
注意，赋给元组 dimensions 的值与之前的示例不一样，没有使用括号。编写元组时，也可以选择使用括号，如果括号不用于明确代码，程序员会经常会将其省略。

# 元组解包
在第二行中，将元组 dimensions 的内容赋值给三个变量。我们将这称为元组解包。大家可以使用元组拆包，将元组中的信息赋值给多个变量，而不必逐个访问和编写多个赋值语句。

在该示例中，如果不需要直接使用 dimensions，我们可以将这两行代码缩短为一行，一次为三个变量赋值！

length, width, height = 52, 40, 100

# 元组不变性
另外一方面，元组的不变性也是一个重要属性。与列表不同，元组可以存储在集合（set）中，或用作字典的键（key）。由于这两种数据结构需要不可变的键，所以不可以使用列表。（如果好奇为什么集合和字典需要不可变的键，可以查阅 CS101 第 5 课。在该课程中，你将从头开始重新构建一个字典，了解字典的运行原理。） 在下面的例子中，我们创建一个字典 world_heritage_locations，该字典具有 (latitude, longitude) 形式的元组作为键（key），以及表示相应地名的字符串作为值（value）。

world_heritage_locations = {(13.4125, 103.866667): "Angkor Wat",
                            (25.73333, 32.6): "Ancient Thebes",
                            (30.330556, 35.4433330): "Petra",
                            (-13.116667, -72.583333): "Machu Picchu"}

# 返回元组
元组的常见用法是函数返回多个值：

def first_and_last(sequence):
    """returns the first and last elements of a sequence"""
    return sequence[0], sequence[-1]
函数 first_and_last 的使用方法如下：

>\>>> first_and_last(["Spam", "egg", "sausage", "Spam"]) \
('Spam', 'Spam')
返回一个元组的函数也可以用于为多个变量赋值：
>\>>> start, end = first_and_last(["Spam", "egg", "sausage", "Spam"]) \
>\>>> print(start)  \
Spam
>\>>> print(end) \
Spam

# 练习：天和小时
尝试编写一个使用元组返回多个值的函数。编写 hours2days 函数，传入一个整数类型的参数，该参数表示一个以小时为单位的时间段。该函数应该返回一个元组，用天和小时为单位表示传入的时间段，不足一天的时间用小时表示。例如，39 个小时表示 1 天 15 个小时，所以函数返回的应该是 (1,15)。

这些例子演示了该函数的使用：

>\>>> hours2days(24) # 24 hours is one day and zero hours \
(1, 0)
>\>>>  hours2days(25) # 25 hours is one day and one hour   \
(1, 1)
>\>>> hours2days(10000) \
(416, 16)
你可以用它们测试你的代码。该函数不需要处理负数的输入。
